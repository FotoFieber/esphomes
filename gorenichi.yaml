substitutions:
  boiler_url: "http://192.168.10.69"

esphome:
  name: gorenichi
  platformio_options:
    upload_speed: 460800
    board_build.f_cpu: 160000000L
#    board_build.f_flash: 40000000L
#    board_build.flash_mode: dio
#    board_build.flash_size: 4MB
  includes:
    - http_sensor_idf.h

esp32:
  board: lolin_s2_mini
  framework:
    type: esp-idf
    platform_version: 5.4.0
    version: 4.4.5

wifi:
  ssid: !secret wifi_ssid_home
  password: !secret wifi_password_home
  reboot_timeout: 0s  
  ap:
    ssid: "gorenichi-heat"
    password: !secret ap_password
  power_save_mode: HIGH

# Enable logging
logger:
  #level: debug
  #level: INFO

# Enable Home Assistant API
api:
  reboot_timeout: 0s  

ota:

# Активация web сервера
web_server:
  port: 80
  ota: false
  version: 2
  js_include: "www_all_number.js"
  js_url: ""

status_led:
  pin:
    number: GPIO15
    inverted: false

globals:
  - id: floor1_all_receive
    type: int
    restore_value: no
    initial_value: '0'    
  - id: floor2_all_receive
    type: int
    restore_value: no
    initial_value: '0'

number:
  #curl -X POST http://192.168.10.74/number/floor_1_temperature_sensor/set?value=24.3
  - platform: template
    name: "floor 1 sensor temperature data"
    id: "f1td"
    min_value: -20
    max_value: 40
    step: 0.1
    optimistic: true
    on_value: 
      then:
        - sensor.template.publish:
            id: floor1_temperature_id
            state: !lambda 'if(x > -20) return x; else return NAN;'

  - platform: template
    name: "floor 1 sensor humidity data"
    id: "f1hd"
    min_value: 0
    max_value: 100
    step: 1
    optimistic: true
    on_value: 
      then:
        - sensor.template.publish:
            id: floor1_humidity_id
            state: !lambda 'if(x > 0) return x; else return NAN;'

  - platform: template
    name: "floor 1 sensor vcc data"
    id: "f1vccd"
    min_value: 0
    max_value: 5
    step: 0.01
    optimistic: true

  - platform: template
    name: "floor 2 sensor temperature data"
    id: "f2td"
    min_value: -20
    max_value: 40
    step: 0.1
    optimistic: true
    on_value: 
      then:
        - sensor.template.publish:
            id: floor2_temperature_id
            state: !lambda 'if(x > -20) return x; else return NAN;'

  - platform: template
    name: "floor 2 sensor humidity data"
    id: "f2hd"
    min_value: 0
    max_value: 100
    step: 1
    optimistic: true
    on_value: 
      then:
        - sensor.template.publish:
            id: floor2_humidity_id
            state: !lambda 'if(x > 0) return x; else return NAN;'

  - platform: template
    name: "floor 2 sensor vcc data"
    id: "f2vccd"
    min_value: 0
    max_value: 5
    step: 0.01
    optimistic: true

font:
  - file: "fonts/tahomabd.ttf"
    id: tahoma_clock
    size: 80
  - file: "fonts/tahomabd.ttf"
    id: tahoma_16
    size: 16
  - file: "fonts/tahomabd.ttf"
    id: tahoma_8
    size: 8
  - file: "fonts/tahomabd.ttf"
    id: tahoma_digits
    size: 12

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
      mode:
        input: true
        pullup: true
    filters:
      - delayed_on: 50ms
    name: "Switch button"

dallas:
  - pin: 1
    update_interval: 1min

sensor:
  #данные с датчиков
  - platform: template
    name: "floor 1 sensor temperature"
    id: floor1_temperature_id
    on_value: 
      then:
        - component.update: mydisplay

  - platform: template
    name: "floor 1 sensor humidity"
    id: floor1_humidity_id

  - platform: template
    name: "floor 2 sensor temperature"
    id: floor2_temperature_id
    on_value: 
      then:
        - component.update: mydisplay    

  - platform: template
    name: "floor 2 sensor humidity"
    id: floor2_humidity_id

  - platform: dallas
    address: 0x1c0000031edd2a28
    name: "Waterfloor sensor temperature"
    id: waterfloor_temperature_id
    on_value: 
      then:
        - component.update: mydisplay

    #данные с котла
  - platform: custom
    lambda: |-
      auto tasmota_sensors = new HTTPSensor("http://192.168.10.69/cm?cmnd=Status%2010", "StatusSNS.DHT11.Temperature;StatusSNS.DHT11.Temperature2;StatusSNS.DHT11.Temperature3");
      tasmota_sensors->set_update_interval(300000);
      App.register_component(tasmota_sensors);
      return {tasmota_sensors->sensors_array[0], tasmota_sensors->sensors_array[1], tasmota_sensors->sensors_array[2]};

    sensors:
      - name: "Boiler heating temperature"
        unit_of_measurement: °C
        device_class: TEMPERATURE
        id: remote_htemp_id
        accuracy_decimals: 1
      - name: "Boiler ambient temperature"
        unit_of_measurement: °C
        device_class: TEMPERATURE
        id: remote_atemp_id
      - name: "Boiler water temperature"
        unit_of_measurement: °C
        device_class: TEMPERATURE
        id: remote_wtemp_id   


  - platform: uptime
    name: Uptime Sensor
    update_interval: 5min

  - platform: internal_temperature
    name: "Internal Temperature"
    id: internal_temperature_id
    update_interval: 5min

switch:
  - platform: gpio
    pin:
       number: GPIO4
       inverted: true
    id: relay1
    on_turn_on:
      - component.update: mydisplay
    on_turn_off:
      - component.update: mydisplay

  - platform: gpio
    pin:
       number: GPIO5
       inverted: true
    id: relay2
    on_turn_on:
      - component.update: mydisplay
    on_turn_off:
      - component.update: mydisplay    
  - platform: gpio
    pin:
       number: GPIO6
       inverted: true
    id: relay3
    on_turn_on:
      - component.update: mydisplay
    on_turn_off:
      - component.update: mydisplay    
  - platform: gpio
    pin:
       number: GPIO7
       inverted: true
    id: relay4
    on_turn_on:
      - component.update: mydisplay
    on_turn_off:
      - component.update: mydisplay    

output:
  - platform: ledc
    pin:
      number: GPIO14
      inverted: true
      mode:
        output: true
        open_drain: true
    id: display_backlight_out

light:
  - platform: monochromatic
    id: backlight
    name: "Display"
    output: display_backlight_out
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: status_led
    name: "Switch state"
    id: led1
    pin:
      number: GPIO15
      inverted: false

spi:
  clk_pin: GPIO12
  mosi_pin: GPIO11

display:
  - platform: st7565r
    cs_pin: GPIO10
    dc_pin: GPIO9
    reset_pin: GPIO8
    id: mydisplay
    update_interval: never
    lambda: |-
      //2 floor temp
      it.printf(0, 10, id(tahoma_digits), "%2.1f°C", id(floor2_temperature_id).state);
      //1 floor temp
      it.printf(0, 30, id(tahoma_digits), "%2.1f°C", id(floor1_temperature_id).state);
      //Warmfloor temp
      it.printf(9, 50, id(tahoma_digits), "%2.1f°C", id(waterfloor_temperature_id).state);
      //boiler heater temp
      it.printf(75, 50, id(tahoma_digits), "%2.1f°C", id(remote_htemp_id).state);
      //boiler water temp
      it.printf(90, 10, id(tahoma_digits), "%2.1f°C", id(remote_wtemp_id).state);

      //draw home
      it.line(0,8,19,0); it.line(20,0,40,8); it.line(0,25,40,25);       
      it.line(0, 63, 35, 63); it.line(0, 63, 10, 45); it.line( 10, 45, 45, 45); // it.line(45, 45, 35, 63);

      //draw pump 2 floor
      it.circle(60, 13, 9);
      int y12 = 8;
      int xl = 8;
      int y0 = 13;
      int x0 = 52;
      //filled tri
      if (id(relay2).state)
      {
        it.draw_pixel_at(x0, y0, COLOR_ON);
        for(int x = 0; x<=8; x++)
        {
          int y = x * y12 / xl;
          for(int yp = (-1*y); yp<=y; yp++)
          {
            it.draw_pixel_at(x0 + x, y0 + yp, COLOR_ON);
          }
        }
      }

      //draw pump 1 floor
      it.circle(60, 33, 9);
      y0 = 33;
      if (id(relay1).state)
      {
        it.draw_pixel_at(x0, y0, COLOR_ON);
        for(int x = 0; x<=8; x++)
        {
          int y = x * y12 / xl;
          for(int yp = (-1*y); yp<=y; yp++)
          {
            it.draw_pixel_at(x0 + x, y0 + yp, COLOR_ON);
          }
        }
      }

      //draw pump waterfloor
      it.circle(60, 53, 9);
      y0 = 53;
      if (id(relay3).state)
      {
        it.draw_pixel_at(x0, y0, COLOR_ON);
        for(int x = 0; x<=8; x++)
        {
          int y = x * y12 / xl;
          for(int yp = (-1*y); yp<=y; yp++)
          {
            it.draw_pixel_at(x0 + x, y0 + yp, COLOR_ON);
          }
        }
      }

climate:
  - platform: bang_bang
    name: "Floor 1 Climate Controller"
    sensor: floor1_temperature_id
    default_target_temperature_low: 20 °C
    default_target_temperature_high: 22 °C

    heat_action:
      - switch.turn_on: relay1
    idle_action:
      - switch.turn_off: relay1

  - platform: bang_bang
    name: "Floor 2 Climate Controller"
    sensor: floor2_temperature_id
    default_target_temperature_low: 20 °C
    default_target_temperature_high: 22 °C

    heat_action:
      - switch.turn_on: relay2
    idle_action:
      - switch.turn_off: relay2

  - platform: bang_bang
    name: "Waterfloor Climate Controller"
    sensor: waterfloor_temperature_id
    default_target_temperature_low: 35 °C
    default_target_temperature_high: 45 °C

    heat_action:
      - switch.turn_on: relay3
    idle_action:
      - switch.turn_off: relay3

