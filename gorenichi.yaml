substitutions:
  boiler_ip: "192.168.10.69"

esphome:
  name: gorenichi
  platformio_options:
    upload_speed: 460800
    board_build.f_cpu: 160000000L
#    board_build.f_flash: 40000000L
#    board_build.flash_mode: dio
#    board_build.flash_size: 4MB
  includes:
    - http_sensor_idf.h

esp32:
  board: lolin_s2_mini
  framework:
    type: esp-idf
    platform_version: 5.4.0
    version: 4.4.5

wifi:
  ssid: !secret wifi_ssid_home
  password: !secret wifi_password_home
  reboot_timeout: 0s  
  ap:
    ssid: "gorenichi-heat"
    password: !secret ap_password
  power_save_mode: HIGH

# Enable logging
logger:
  #level: debug
  #level: INFO

# Enable Home Assistant API
api:
  reboot_timeout: 0s  

ota:

# Активация web сервера
web_server:
  port: 80
  ota: false
  version: 2
  js_include: "www_all_number.js"
  js_url: ""

status_led:
  pin:
    number: GPIO15
    inverted: false

font:
  - file: "fonts/tahomabd.ttf"
    id: tahoma_clock
    size: 80
  - file: "fonts/tahomabd.ttf"
    id: tahoma_16
    size: 16
  - file: "fonts/tahomabd.ttf"
    id: tahoma_8
    size: 8

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
      mode:
        input: true
        pullup: true
    filters:
      - delayed_on: 50ms
    name: "Switch button"

sensor:
  - platform: template
    name: "Boiler temperature"
    id: template_btemperature_id

  - platform: template
    name: "Boiler humidity"
    id: template_bhumidity_id    

  - platform: uptime
    name: Uptime Sensor
    update_interval: 5min

  - platform: internal_temperature
    name: "Internal Temperature"
    id: internal_temperature_id
    update_interval: 5min

  - platform: custom
    lambda: |-
      auto http_sensor = new HTTPSensor();
      App.register_component(http_sensor);
      return {http_sensor->temperature_sensor};
  
    sensors:
    - name: "My Custom Temperature Sensor"
      unit_of_measurement: °C
      accuracy_decimals: 1


switch:
  - platform: gpio
    pin:
       number: GPIO1
    id: relay1
    on_turn_on:
      - light.turn_on: led1
    on_turn_off:
      - light.turn_off: led1

output:
  - platform: ledc
    pin:
      number: GPIO14
      inverted: true
      mode:
        output: true
        open_drain: true
    id: backlight_out

light:
  - platform: monochromatic
    id: backlight
    name: "Display"
    output: backlight_out    

  - platform: status_led
    name: "Switch state"
    id: led1
    pin:
      number: GPIO15
      inverted: false                 

spi:
  clk_pin: GPIO12
  mosi_pin: GPIO11

display:
  - platform: st7565r
    cs_pin: GPIO10
    dc_pin: GPIO9
    reset_pin: GPIO8
    id: display_id
    lambda: |-
      it.printf(0, 0, id(tahoma_8), "%.1f°C", id(internal_temperature_id).state);
      /*
      #include "FreeSans9pt7b.h"

        void updateDisplay() {
            display.clearDisplay();
            display.setTextColor(WHITE);
            display.setTextSize(1);
            display.setFont(&FreeSans9pt7b);
            display.setCursor(1, 21);
            display.print("25 C");
            display.setCursor(1, 41);
            display.print("20 C");
            display.setCursor(9, 61);
            display.print("39 C");
            display.setCursor(75, 61);
            display.print("69 C");
            display.setCursor(90, 20);
            display.print("42 C");
            display.drawLine(0, 8, 19, 0, 1);
            display.drawLine(20, 0, 40, 8, 1);
            display.drawLine(0, 25, 40, 25, 1);
            display.drawLine(0, 63, 35, 63, 1);
            display.drawLine(0, 63, 10, 45, 1);
            display.drawLine(45, 45, 35, 63, 0);
            display.drawLine(10, 45, 45, 45, 1);
            display.drawCircle(60, 13, 9, 1);
            display.drawCircle(60, 33, 9, 1);
            display.drawCircle(60, 53, 9, 1);
            display.fillTriangle(52, 13, 60, 5, 60, 21, 1);
            display.fillTriangle(52, 33, 60, 25, 60, 41, 1);
            display.fillTriangle(52, 53, 60, 45, 60, 61, 1);
            display.drawRect(72, 33, 56, 31, 1);
            display.display();
        }
              */