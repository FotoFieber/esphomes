esphome:
  name: gorenichi
  platformio_options:
    upload_speed: 460800
    board_build.f_cpu: 160000000L
#    board_build.f_flash: 40000000L
#    board_build.flash_mode: dio
#    board_build.flash_size: 4MB

esp32:
  board: mhetesp32devkit
#  framework:
#    type: esp-idf
#    sdkconfig_options:
#      CONFIG_LWIP_MAX_SOCKETS: "16"

wifi:
  ssid: !secret wifi_ssid_home
  password: !secret wifi_password_home
  reboot_timeout: 1h
  ap:
    ssid: "gorenichi-heat"
    password: !secret ap_password
  power_save_mode: HIGH
  manual_ip:
    static_ip: 192.168.1.20
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1

# Enable logging
logger:
  #level: VERBOSE
  #level: INFO

# Enable Home Assistant API
api:
  reboot_timeout: 0s

ota:
  password: !secret mqtt_password

mqtt:
  log_topic: null
  broker: dev.rightech.io
  port: 1883
  username: gorenichi
  password: !secret mqtt_password
  reboot_timeout: 24h

# Активация web сервера
web_server:
  port: 80
  ota: false
  version: 2
  js_include: "www_all_number.js"
  js_url: ""
#  auth:
#    username: gorenichi
#    password: !secret mqtt_password

status_led:
  pin:
    number: GPIO2
    inverted: true

font:
  - file: "fonts/tahomabd.ttf"
    id: tahoma_clock
    size: 80
  - file: "fonts/tahomabd.ttf"
    id: tahoma_16
    size: 16
  - file: "fonts/tahomabd.ttf"
    id: tahoma_8
    size: 8
  - file: "fonts/tahomabd.ttf"
    id: tahoma_digits
    size: 12

globals:
  - id: floor1_data_timeout
    type: int
    restore_value: no
    initial_value: "0"
  - id: floor2_data_timeout
    type: int
    restore_value: no
    initial_value: "0"
  - id: waterfloor_data_timeout
    type: int
    restore_value: no
    initial_value: "0"

  - id: floor1_set_climate
    type: float
    restore_value: yes
    initial_value: "22.0"
  - id: floor2_set_climate
    type: float
    restore_value: yes
    initial_value: "22.0"
  - id: waterfloor_set_climate
    type: float
    restore_value: yes
    initial_value: "30.0"

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
      mode:
        input: true
        pullup: true
    filters:
      - delayed_on: 50ms
    name: "Switch button"
    internal: true

number:
  #curl -X POST http://192.168.10.74/number/floor_1_temperature_sensor/set?value=24.3
  - platform: template
    name: "floor 1 sensor temperature data"
    id: "f1td"
    min_value: -300
    max_value: 1000
    step: 1
    optimistic: true
    internal: true
    on_value:
      then:
        - sensor.template.publish:
            id: floor1_temperature_id
            state: !lambda "if(x > -300) return x / 10.0; else return NAN;"

  - platform: template
    name: "floor 1 sensor humidity data"
    id: "f1hd"
    min_value: 0
    max_value: 100
    step: 1
    optimistic: true
    internal: true
    on_value:
      then:
        - sensor.template.publish:
            id: floor1_humidity_id
            state: !lambda "if(x > 0) return x; else return NAN;"

  - platform: template
    name: "floor 1 sensor vcc data"
    id: "f1vccd"
    min_value: 0
    max_value: 5000
    step: 1
    optimistic: true
    internal: true
    on_value:
      then:
        - sensor.template.publish:
            id: floor1_vcc_id
            state: !lambda "if(x > 0) return x / 1000.0; else return NAN;"

  - platform: template
    name: "floor 2 sensor temperature data"
    id: "f2td"
    min_value: -300
    max_value: 1000
    step: 1
    optimistic: true
    internal: true
    on_value:
      then:
        - sensor.template.publish:
            id: floor2_temperature_id
            state: !lambda "if(x > -300) return x / 10.0; else return NAN;"

  - platform: template
    name: "floor 2 sensor humidity data"
    id: "f2hd"
    min_value: 0
    max_value: 100
    step: 1
    optimistic: true
    internal: true
    on_value:
      then:
        - sensor.template.publish:
            id: floor2_humidity_id
            state: !lambda "if(x > 0) return x; else return NAN;"

  - platform: template
    name: "floor 2 sensor vcc data"
    id: "f2vccd"
    min_value: 0
    max_value: 5000
    step: 1
    optimistic: true
    internal: true
    on_value:
      then:
        - sensor.template.publish:
            id: floor2_vcc_id
            state: !lambda "if(x > 0) return x / 1000.0; else return NAN;"

dallas:
  - pin: GPIO13
    update_interval: 1min

sensor:
  #данные с датчиков
  - platform: template
    name: "Floor 1 sensor temperature"
    id: floor1_temperature_id
    device_class: "temperature"
    state_class: "measurement"
    unit_of_measurement: "°C"
    on_value:
      then:
        - component.update: mydisplay
        - globals.set:
            id: floor1_data_timeout
            value: "0"

  - platform: template
    name: "Floor 1 sensor humidity"
    id: floor1_humidity_id
    device_class: "HUMIDITY"
    state_class: "measurement"
    unit_of_measurement: "%"

  - platform: template
    name: "Floor 1 sensor vcc battery"
    id: floor1_vcc_id
    accuracy_decimals: 2
    device_class: "VOLTAGE"
    state_class: "measurement"
    unit_of_measurement: "V"

  - platform: template
    name: "Floor 2 sensor temperature"
    id: floor2_temperature_id
    device_class: "temperature"
    state_class: "measurement"
    unit_of_measurement: "°C"
    on_value:
      then:
        - component.update: mydisplay
        - globals.set:
            id: floor2_data_timeout
            value: "0"

  - platform: template
    name: "Floor 2 sensor humidity"
    id: floor2_humidity_id
    device_class: "HUMIDITY"
    state_class: "measurement"
    unit_of_measurement: "%"

  - platform: template
    name: "Floor 2 sensor vcc battery"
    id: floor2_vcc_id
    accuracy_decimals: 2
    device_class: "VOLTAGE"
    state_class: "measurement"
    unit_of_measurement: "V"

  - platform: dallas
    address: 0x0f3c3cf649848c28
    name: "Waterfloor sensor temperature"
    id: waterfloor_temperature_id
    on_value:
      then:
        - component.update: mydisplay
        - globals.set:
            id: waterfloor_data_timeout
            value: "0"

  - platform: dallas
    address: 0xe13c0df649c70128
    name: "Boiler sensor temperature"
    id: boiler_temperature_id
    on_value:
      then:
        - component.update: mydisplay
        - lambda: |-
            if(x > id(floor1_controller).target_temperature_low && 
                x > id(floor2_controller).target_temperature_low && 
                  x > id(waterfloor_controller).target_temperature_low)
                  { id(boiler_permission).turn_on(); }
                  else { id(boiler_permission).turn_off(); };

  - platform: uptime
    name: "uptime sensor"
    update_interval: 5min

switch:
  - platform: gpio
    pin:
      number: GPIO17
      inverted: true
    id: relay1
    name: 'Relay "Pump 1"'
    on_turn_on:
      - component.update: mydisplay
    on_turn_off:
      - component.update: mydisplay

  - platform: gpio
    pin:
      number: GPIO5
      inverted: true
    id: relay2
    name: 'Relay "Pump 2"'
    on_turn_on:
      - component.update: mydisplay
    on_turn_off:
      - component.update: mydisplay

  - platform: gpio
    pin:
      number: GPIO18
      inverted: true
    id: relay3
    name: 'Relay "Pump 3"'
    on_turn_on:
      - component.update: mydisplay
    on_turn_off:
      - component.update: mydisplay

  - platform: gpio
    pin:
      number: GPIO19
      inverted: true
    id: relay4
    on_turn_on:
      - component.update: mydisplay
    on_turn_off:
      - component.update: mydisplay

  - platform: gpio
    pin:
      number: GPIO32
      inverted: false
    id: relayb
    name: 'Relay "Boiler"'
    on_turn_on:
      - component.update: mydisplay
    on_turn_off:
      - component.update: mydisplay

  - platform: template
    name: "Boiler permission"
    id: boiler_permission
    optimistic: true
    restore_mode: ALWAYS_OFF

  - platform: template
    name: "All controllers control"
    assumed_state: true
    turn_on_action:
      - climate.control:
          id: floor1_controller
          mode: "HEAT"
      - climate.control:
          id: floor2_controller
          mode: "HEAT"
      - climate.control:
          id: waterfloor_controller
          mode: "HEAT"
    turn_off_action:
      - climate.control:
          id: floor1_controller
          mode: "OFF"
      - climate.control:
          id: floor2_controller
          mode: "OFF"
      - climate.control:
          id: waterfloor_controller
          mode: "OFF"

output:
  - platform: ledc
    pin:
      number: GPIO33
      inverted: true
      mode:
        output: true
        open_drain: true
    id: display_backlight_out

light:
  - platform: monochromatic
    id: backlight
    name: "display backliqht"
    output: display_backlight_out
    restore_mode: RESTORE_DEFAULT_OFF

spi:
  clk_pin: GPIO26
  mosi_pin: GPIO25

display:
  - platform: st7565r
    cs_pin: GPIO12
    dc_pin: GPIO27
    reset_pin: GPIO14
    id: mydisplay
    update_interval: never
    lambda: |-
      it.set_rotation(DISPLAY_ROTATION_180_DEGREES);
      //2 floor temp
      it.printf(0, 10, id(tahoma_digits), "%2.1f°C%c", id(floor2_temperature_id).state, id(floor2_vcc_id).state < 2.0?'!':' ');
      //1 floor temp
      it.printf(0, 30, id(tahoma_digits), "%2.1f°C%c", id(floor1_temperature_id).state, id(floor1_vcc_id).state < 2.0?'!':' ');
      //Warmfloor temp
      it.printf(9, 49, id(tahoma_digits), "%2.1f°C", id(waterfloor_temperature_id).state);
      //boiler temp
      it.printf(80, 49, id(tahoma_digits), "%2.1f°C", id(boiler_temperature_id).state);

      //draw boiler
      it.rectangle(77, 25, 50, 39);
      if (id(relayb).state)
      {
        it.print(102, 30, id(tahoma_digits), TextAlign::TOP_CENTER, "ON");        
      }

      //draw home
      it.line(0,8,19,0); it.line(20,0,40,8); it.line(0,25,40,25);       
      it.line(0, 63, 35, 63); it.line(0, 63, 10, 45); it.line( 10, 45, 45, 45); // it.line(45, 45, 35, 63);

      //draw pump 2 floor
      it.circle(60, 13, 9);
      int y12 = 8;
      int xl = 8;
      int y0 = 13;
      int x0 = 52;
      //filled tri
      if (id(relay2).state)
      {
        it.draw_pixel_at(x0, y0, COLOR_ON);
        for(int x = 0; x<=8; x++)
        {
          int y = x * y12 / xl;
          for(int yp = (-1*y); yp<=y; yp++)
          {
            it.draw_pixel_at(x0 + x, y0 + yp, COLOR_ON);
          }
        }
      }

      //draw pump 1 floor
      it.circle(60, 33, 9);
      y0 = 33;
      if (id(relay1).state)
      {
        it.draw_pixel_at(x0, y0, COLOR_ON);
        for(int x = 0; x<=8; x++)
        {
          int y = x * y12 / xl;
          for(int yp = (-1*y); yp<=y; yp++)
          {
            it.draw_pixel_at(x0 + x, y0 + yp, COLOR_ON);
          }
        }
      }

      //draw pump waterfloor
      it.circle(60, 53, 9);
      y0 = 53;
      if (id(relay3).state)
      {
        it.draw_pixel_at(x0, y0, COLOR_ON);
        for(int x = 0; x<=8; x++)
        {
          int y = x * y12 / xl;
          for(int yp = (-1*y); yp<=y; yp++)
          {
            it.draw_pixel_at(x0 + x, y0 + yp, COLOR_ON);
          }
        }
      }

button:
  - platform: template
    name: 'All mode "Away"'
    on_press:
      then:
        - lambda: |-
            if (id(floor1_controller).preset == CLIMATE_PRESET_HOME) {
              id(floor1_set_climate) = id(floor1_controller).target_temperature_low;
            }
            if (id(floor2_controller).preset == CLIMATE_PRESET_HOME) {
              id(floor2_set_climate) = id(floor2_controller).target_temperature;
            }
            if (id(waterfloor_controller).preset == CLIMATE_PRESET_HOME) {
              id(waterfloor_set_climate) = id(waterfloor_controller).target_temperature;
            }
        - climate.control:
            id: floor1_controller
            preset: "AWAY"
        - climate.control:
            id: floor2_controller
            preset: "AWAY"
        - climate.control:
            id: waterfloor_controller
            preset: "AWAY"

  - platform: template
    name: 'All mode "Home"'
    on_press:
      then:
        - climate.control:
            id: floor1_controller
            preset: "HOME"
            target_temperature: !lambda return id(floor1_set_climate);
        - climate.control:
            id: floor2_controller
            preset: "HOME"
            target_temperature: !lambda return id(floor2_set_climate);
        - climate.control:
            id: waterfloor_controller
            preset: "HOME"
            target_temperature: !lambda return id(waterfloor_set_climate);

climate:
  - platform: thermostat
    name: "Floor 1 Climate Controller"
    id: floor1_controller
    sensor: floor1_temperature_id
    min_idle_time: 30s
    min_heating_off_time: 120s
    min_heating_run_time: 120s
    heat_deadband: 1
    heat_overrun: 1
    default_preset: HOME
    preset:
      - name: HOME
        default_target_temperature_low: 22 °C
      - name: AWAY
        default_target_temperature_low: 15 °C
    visual:
      min_temperature: 5
    heat_action:
      - switch.turn_on: relayb
    idle_action:
      - switch.turn_off: relay1
      - script.execute: boiler_off
    on_state:
      - lambda: |-
          if (x.action == CLIMATE_ACTION_HEATING)
          {
            if (!id(relay1).state) //реле насоса выключено
            {
              if (id(boiler_permission).state && !id(relay3).state)
              {
                id(relay1).turn_on();
              }
            }
            else //реле насоса включено
            {
              if (id(boiler_temperature_id).state < x.target_temperature_low)
              {
                id(relay1).turn_off();
              }
            }
          }      

  - platform: thermostat
    name: "Floor 2 Climate Controller"
    id: floor2_controller
    sensor: floor2_temperature_id
    min_idle_time: 30s
    min_heating_off_time: 120s
    min_heating_run_time: 120s
    heat_deadband: 1
    heat_overrun: 1
    default_preset: HOME
    preset:
      - name: HOME
        default_target_temperature_low: 22 °C
      - name: AWAY
        default_target_temperature_low: 15 °C
    visual:
      min_temperature: 5
    heat_action:
      - switch.turn_on: relayb
    idle_action:
      - switch.turn_off: relay2
      - script.execute: boiler_off
    on_state:
      - lambda: |-
          if (x.action == CLIMATE_ACTION_HEATING)
          {
            if (!id(relay2).state) //реле насоса выключено
            {
              if (id(boiler_permission).state && !id(relay3).state)
              {
                id(relay2).turn_on();
              }
            }
            else //реле насоса включено
            {
              if (id(boiler_temperature_id).state < x.target_temperature_low)
              {
                id(relay2).turn_off();
              }
            }
          }

  - platform: thermostat
    name: "Waterfloor Climate Controller"
    id: waterfloor_controller
    sensor: waterfloor_temperature_id
    min_idle_time: 30s
    min_heating_off_time: 120s
    min_heating_run_time: 120s
    heat_deadband: 1
    heat_overrun: 1
    default_preset: HOME
    preset:
      - name: HOME
        default_target_temperature_low: 30 °C
      - name: AWAY
        default_target_temperature_low: 15 °C
    visual:
      min_temperature: 5
      max_temperature: 40
    heat_action:
      - switch.turn_on: relayb
    idle_action:
      - switch.turn_off: relay3
      - script.execute: boiler_off
    on_state:
      - lambda: |-
          if (x.action == CLIMATE_ACTION_HEATING)
          {
            if (!id(relay3).state) //реле насоса выключено
            {
              if (id(boiler_permission).state)
              {
                id(relay1).turn_off();
                id(relay2).turn_off();
                id(relay3).turn_on();
              }
            }
            else //реле насоса включено
            {
              if (id(boiler_temperature_id).state < x.target_temperature_low)
              {
                id(relay3).turn_off();
              }
            }
          }

interval:
  # таймауты датчиков
  - interval: 5min
    then:
      - lambda: |-
          id(floor1_data_timeout)++;
          if (id(floor1_data_timeout) > 3) {
            id(floor1_temperature_id).publish_state(NAN);
            id(floor1_data_timeout) = 0;}

          id(floor2_data_timeout)++;
          if (id(floor2_data_timeout) > 3) {
            id(floor2_temperature_id).publish_state(NAN);
            id(floor2_data_timeout) = 0;}

script:
  - id: boiler_off
    then:
      - lambda: |-
          if (id(floor1_controller).action != CLIMATE_ACTION_HEATING &&  
              id(floor2_controller).action != CLIMATE_ACTION_HEATING &&  
                id(waterfloor_controller).action != CLIMATE_ACTION_HEATING)
                  { id(relayb).turn_off(); };
