esphome:
  name: barometer
  on_boot:
    - priority: -100
      then:
        - delay: 30s
        - deep_sleep.enter:
            id: deep_sleep_1
            sleep_duration: !lambda "if (id(batt).state > 3.3) return 10 * 60 * 1000 /*10min*/; else return 60 * 60 * 1000 /*60min*/;"

esp8266:
  board: d1_mini

deep_sleep:
  id: deep_sleep_1
  run_duration: 60s
  sleep_duration: 1h

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: ""

ota:
  password: ""

wifi:
  networks:
    - ssid: !secret wifi_ssid_my_home1
      password: !secret wifi_password_my_home1
    - ssid: !secret wifi_ssid_my_home2
      password: !secret wifi_password_my_home2

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "barometer Fallback Hotspot"
    password: !secret ap_password

web_server:
  port: 80
  include_internal: true
  ota: true

#status_led:
#  pin:
#    number: D4
#    inverted: true

i2c:
  sda: D3
  scl: D1
  scan: false
  id: bus_a
  frequency: 100khz

sensor:
  - platform: dht
    pin: D2
    model: DHT11
    temperature:
      name: "Temperature dht"
    humidity:
      name: "Humidity dht"

  - platform: bmp085
    temperature:
      name: "Temperature BMP180"
    pressure:
      name: "Pressure BMP180"

  - platform: wifi_signal
    name: "WiFi Signal Sensor"

  - platform: adc
    id: batt
    pin: A0
    name: "Battery voltage"
    filters:
      - multiply: 5.93
    on_value:
      then:
        - if:
            condition:
              lambda: 'return x < 3.0;'
            then:
            - deep_sleep.enter:
                id: deep_sleep_1
                sleep_duration: 24h
