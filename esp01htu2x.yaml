substitutions:
  temp_set_url: "http://192.168.10.70/number/floor_1_sensor_temperature_data/set?value="
  humi_set_url: "http://192.168.10.70/number/floor_1_sensor_humidity_data/set?value="
  vcc_set_url: "http://192.168.10.70/number/floor_1_sensor_vcc_data/set?value="

esphome:
  name: esp01htu2x

esp8266:
  board: esp01_1m

deep_sleep:
  run_duration: 60s
  sleep_duration: 5min
  id: deep_sleep_5m

wifi:
  ssid: !secret wifi_ssid_home
  password: !secret wifi_password_home
  reboot_timeout: 0s
#  ap:
#    ssid: "esp01htu2x1"
#    password: !secret ap_password
#    ap_timeout: 20s
#  power_save_mode: HIGH

#captive_portal:

# Enable logging
logger:
  #level: VERY_VERBOSE
  #level: INFO

# Enable Home Assistant API
api:
  reboot_timeout: 0s

ota:

# Активация web сервера
web_server:
  port: 80
  ota: false
  version: 1

globals:
  - id: send_data
    type: int
    restore_value: no
    initial_value: '0'

script:
  - id: check_sleep
    parameters:
      addition: int
    then:
      - lambda: |-
            id(send_data) += addition;
      - if:
          condition:
            lambda: 'return id(send_data) == 7;'
          then:
            - deep_sleep.enter:
                id: deep_sleep_5m
                sleep_duration: 5min
  

http_request:
  useragent: esphome/device
  timeout: 3s
  esp8266_disable_ssl_support: yes

i2c:
  sda: 0
  scl: 2
  scan: false
  id: bus_a
  frequency: 100kHz

# Individual sensors
sensor:
  - platform: uptime
    name: Uptime Sensor

  - platform: htu21d  
    id: dt
    temperature:
      name: "Room Temperature"
      id: temp_id
      on_value:
        - http_request.post:
            url: !lambda |-
              return ((std::string) "${temp_set_url}" + to_string(id(temp_id).state)).c_str();
            verify_ssl: false
            on_response:
              then:
                - if:
                    condition:
                      lambda: |-
                        return status_code == 200;
                    then:
                      - script.execute:
                          id: check_sleep
                          addition: 1

    humidity:
      name: "Room Humidity"
      id: humi_id
      on_value:
        - http_request.post:
            url: !lambda |-
              return ((std::string) "${humi_set_url}" + to_string(id(humi_id).state)).c_str();
            verify_ssl: false
            on_response:
              then:
                - if:
                    condition:
                      lambda: |-
                        return status_code == 200;
                    then:
                      - script.execute:
                          id: check_sleep
                          addition: 2

  - platform: adc
    id: vcc
    pin: VCC
    name: "VCC Voltage"
    on_value:
      - http_request.post:
          url: !lambda |-
            return ((std::string) "${vcc_set_url}" + to_string(id(vcc).state)).c_str();
          verify_ssl: false
          on_response:
            then:
              - if:
                  condition:
                    lambda: |-
                      return status_code == 200;
                  then:
                    - script.execute:
                        id: check_sleep
                        addition: 4

  - platform: wifi_signal
    id: wifi_s
    name: "WiFi Signal Sensor"

switch:
  # for remote sleep POST /switch/deep_sleep_switch/turn_on
  - platform: template
    name: "Deep sleep switch"
    turn_on_action:
      - deep_sleep.enter:
          id: deep_sleep_5m
          sleep_duration: 5min

  # disable sleep for testing
  - platform: template
    name: "Disable sleep switch"
    turn_on_action:
      - deep_sleep.prevent: deep_sleep_5m

  - platform: restart
    name: "Restart switch"
